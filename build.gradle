/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'Latixel' at '06/11/15 22:06' with Gradle 2.8
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.8/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
//apply plugin: 'eclipse' -> pas besoin car projet eclipse-gradle créer depuis eclispe avec plugin
apply plugin: 'findbugs'
apply plugin: 'jacoco'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.12'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    //testCompile 'junit:junit:4.12'
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

findbugs {
    toolVersion = "3.0.1" //pour compactibilité jre 1.7
    effort = "max"
    reportLevel = "low"
    ignoreFailures = true //sinon echec de la compilation
    reportsDir = file("$project.buildDir/findbugsReports")
    //includeFilter = file("$rootProject.projectDir/config/findbugs/includeFilter.xml")
    //excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")
    //sourceSets = [sourceSets.main]
    //sourceSets = [sourceSets.main, sourceSets.test, sourceSets.integrationTest]
}
tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

test {
    //systemProperties 'property': 'value'
}

build.finalizedBy(jacocoTestReport) //pour exécuter automatique le test de couverture (avec junit) après la compilation
/*build {
    doLast {
        jacocoTestResport.execute()
    }
}*/

jacocoTestReport {
    group = "Reporting"
    description = "Générer un rapport de couverture de code (JAvaCOdeCOverage) après les tests"
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
        html.destination "${buildDir}/jacocoHtml"
    }
    doFirst {
        sourceDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/tri/**Exception**'])
        })
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/tri/**Exception**'])
        })
    }
    afterEvaluate { //pas vraiment nécessaire avec doFirst
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/tri/**Exception**'])
        })
    }
}
